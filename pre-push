'''

Copyright (c) 2016 Justin Brower

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#!/usr/bin/python

#   pre-push hook: Runs right before pushing.
#
#   This hook scans for any potential AWS keys and blocks them (after informing the user.)

from __future__ import print_function
import math
import sys
import subprocess

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

AWS = {
    "length" : 40
}

def entropy(string):
    "Calculates the Shannon entropy of a string"
    prob = [ float(string.count(c)) / len(string) for c in dict.fromkeys(list(string)) ]
    entropy = - sum([ p * math.log(p) / math.log(2.0) for p in prob ])
    return entropy


def isRandomlyGeneratePassword(pattern):
    '''
    Randomly generated passwords are long and have high entropy.
    '''
    return entropy(pattern) > 4


def isAws(pattern):
    '''
    AWS keys typically have very high entropy + are 40 characters long.
    '''
    return len(pattern) == 40 and isRandomlyGeneratePassword(pattern)

def abortPush(msg):
    eprint(msg)
    sys.exit(1)
    return

def getDiff(against):
    '''
    literally runs git diff <against>
    '''
    p = subprocess.Popen(['git', 'diff', against], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    return out

def getDiffErrors(diff):
    errors = []
    lines = diff.split("\n")
    for idx, line in enumerate(lines):
        words = line.split()
        for word in words:
            # TODO: Add more types of keys.
            if isAws(word):
                errors.append((idx, word, line, "AWS"))
            elif isRandomlyGeneratePassword(word):
                errors.append((idx, word, line, "unknown"))
    return errors

def patchStdin():
    '''
    Hack to reopen stdin
    '''
    sys.stdin = open('/dev/tty')

def main():
    '''
    - The pre-push hook runs during git push, after the remote refs have been updated but before any objects have been transferred. 
    - It receives the name and location of the remote as parameters, and a list of to-be-updated refs through stdin. 
    - You can use it to validate a set of ref updates before a push occurs (a non-zero exit code will abort the push).
    '''
    all_refs = raw_input("").split()
    refs = []
    identifier = None
    refHash = None
    for i in range(len(all_refs)):
        if i % 2 == 0:
            # identifier
            identifier = all_refs[i]
        else:
            refHash = all_refs[i]
            refs.append((identifier, refHash))
    
    oldRevision = refs[1][1]
    newRevision = refs[0][1]
    diff = getDiff(oldRevision)
    errors = getDiffErrors(diff)
    patchStdin()
    if errors:
        for idx, word, line, t in errors:
            skip = raw_input("[line {}] {} (keytype: {}) - Did you mean to commit this? (y/N): ".format(idx, word, t))
            if skip != "y":
                abortPush("Aborted. Thanks.")
main()



